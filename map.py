import pygame as pg


mini_map = [
    [99, 99, 96, 99, 95, 99, 96, 99, 99, 99, 99, 99, 96, 99, 95, 99, 96, 99, 99],
    [99, 1, 1, 1, 1, 1, 1, 1, 1, 99, 1, 1, 1, 1, 1, 1, 1, 1, 99],
    [96, 1, 99, 99, 1, 99, 95, 99, 1, 96, 1, 99, 95, 99, 1, 99, 99, 1, 96],
    [95, 1, 99, 99, 1, 99, 95, 99, 1, 99, 1, 99, 95, 99, 1, 99, 99, 1, 99],
    [95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 95],
    [96, 1, 99, 99, 1, 99, 1, 99, 96, 95, 96, 99, 1, 99, 1, 99, 99, 1, 96],
    [99, 1, 1, 1, 1, 96, 1, 1, 1, 99, 1, 1, 1, 96, 1, 1, 1, 1, 99],
    [99, 99, 96, 99, 1, 99, 96, 99, 5, 99, 5, 99, 96, 99, 1, 99, 96, 99, 99],
    [99, 99, 99, 96, 1, 96, 1, 1, 1, 1, 1, 1, 1, 96, 1, 99, 99, 99, 99],
    [99, 99, 96, 99, 1, 99, 1, 98, 98, 1, 98, 98, 1, 99, 1, 99, 99, 99, 99],
    [97, 1, 1, 1, 1, 1, 1, 98, 1, 1, 1, 98, 1, 1, 1, 1, 1, 1, 97],
    [99, 99, 96, 99, 1, 99, 1, 98, 98, 98, 98, 98, 1, 99, 1, 99, 96, 99, 99],
    [99, 99, 99, 96, 1, 96, 1, 1, 1, 1, 1, 1, 1, 96, 1, 99, 99, 99, 99],
    [99, 99, 96, 99, 1, 99, 1, 99, 99, 99, 99, 99, 1, 99, 1, 99, 96, 99, 99],
    [99, 1, 1, 1, 1, 1, 1, 1, 1, 99, 1, 1, 1, 1, 1, 1, 1, 1, 99],
    [95, 1, 99, 99, 1, 99, 96, 99, 5, 95, 5, 99, 96, 99, 1, 99, 99, 1, 95],
    [99, 1, 1, 96, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 99, 1, 1, 99],
    [99, 96, 1, 99, 1, 99, 1, 99, 99, 99, 99, 99, 1, 99, 1, 99, 1, 96, 99],
    [99, 1, 1, 1, 1, 96, 1, 1, 1, 96, 1, 1, 1, 96, 1, 1, 1, 1, 99],
    [96, 1, 99, 96, 99, 99, 99, 99, 1, 99, 1, 99, 99, 99, 99, 96, 99, 1, 96],
    [99, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 99],
    [99, 99, 96, 99, 95, 99, 96, 99, 99, 95, 99, 99, 96, 99, 95, 99, 96, 99, 99],
]


class Map:
    def __init__(self, game):
        self.game = game
        self.mini_map = mini_map
        self.world_map = {}
        self.world_map_barriers = {}
        self.rows = len(self.mini_map)
        self.cols = len(self.mini_map[0])
        self.get_map_barriers()
        self.get_map()

    def get_map_barriers(self):
        for j, row in enumerate(self.mini_map):
            for i, value in enumerate(row):
                if value == 99 or value == 98 or value == 97 or value == 96 or value == 95:
                    self.world_map_barriers[(i, j)] = value

    def get_map(self):
        for j, row in enumerate(self.mini_map):
            for i, value in enumerate(row):
                self.world_map[(i, j)] = value
